
SSD1331_HAL_STM32F446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028dc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001558  08002aa0  08002aa0  00012aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ff8  08003ff8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ff8  08003ff8  00013ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004000  08004000  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004000  08004000  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004004  08004004  00014004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08004014  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08004014  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b022  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019f1  00000000  00000000  0002b05e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  0002ca50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000710  00000000  00000000  0002d228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211c6  00000000  00000000  0002d938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a5fa  00000000  00000000  0004eafe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9312  00000000  00000000  000590f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012240a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f44  00000000  00000000  0012245c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002a88 	.word	0x08002a88

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002a88 	.word	0x08002a88

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800051e:	f000 fe25 	bl	800116c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000522:	f000 f857 	bl	80005d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000526:	f000 f8f7 	bl	8000718 <MX_GPIO_Init>
	MX_SPI2_Init();
 800052a:	f000 f8bf 	bl	80006ac <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
	SSD1331_Init();
 800052e:	f000 fca4 	bl	8000e7a <SSD1331_Init>

	HAL_Delay(100);
 8000532:	2064      	movs	r0, #100	; 0x64
 8000534:	f000 fe8c 	bl	8001250 <HAL_Delay>

	SSD1331_setScrolling(Horizontal, 0, 64, 1);
	SSD1331_enableScrolling(1);
	*/

	LCD_Font(5, 25, "SSD1331", &Font_8_Retro, 1, RED);
 8000538:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	2301      	movs	r3, #1
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	4b1e      	ldr	r3, [pc, #120]	; (80005bc <main+0xa4>)
 8000544:	4a1e      	ldr	r2, [pc, #120]	; (80005c0 <main+0xa8>)
 8000546:	2119      	movs	r1, #25
 8000548:	2005      	movs	r0, #5
 800054a:	f000 fbf2 	bl	8000d32 <LCD_Font>
	LCD_Font(5, 45, "OLED", &Font_12_Mono, 1, GREEN);
 800054e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	2301      	movs	r3, #1
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <main+0xac>)
 800055a:	4a1b      	ldr	r2, [pc, #108]	; (80005c8 <main+0xb0>)
 800055c:	212d      	movs	r1, #45	; 0x2d
 800055e:	2005      	movs	r0, #5
 8000560:	f000 fbe7 	bl	8000d32 <LCD_Font>
	LCD_Font(10, 60, "0123456", &Font_9_Mono, 1, BLUE);
 8000564:	23ff      	movs	r3, #255	; 0xff
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	2301      	movs	r3, #1
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <main+0xb4>)
 800056e:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <main+0xb8>)
 8000570:	213c      	movs	r1, #60	; 0x3c
 8000572:	200a      	movs	r0, #10
 8000574:	f000 fbdd 	bl	8000d32 <LCD_Font>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		for (int i=1; i < 30; i++)
 8000578:	2301      	movs	r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	e010      	b.n	80005a0 <main+0x88>
		{
			LCD_Circle(48, 32, i, 0, 1, BLUE);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	b2da      	uxtb	r2, r3
 8000582:	23ff      	movs	r3, #255	; 0xff
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	2301      	movs	r3, #1
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2300      	movs	r3, #0
 800058c:	2120      	movs	r1, #32
 800058e:	2030      	movs	r0, #48	; 0x30
 8000590:	f000 f9f9 	bl	8000986 <LCD_Circle>
			HAL_Delay(100);
 8000594:	2064      	movs	r0, #100	; 0x64
 8000596:	f000 fe5b 	bl	8001250 <HAL_Delay>
		for (int i=1; i < 30; i++)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	3301      	adds	r3, #1
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b1d      	cmp	r3, #29
 80005a4:	ddeb      	ble.n	800057e <main+0x66>
		}

		SSD1331_clearWindow(0, 0, 95, 63);
 80005a6:	233f      	movs	r3, #63	; 0x3f
 80005a8:	225f      	movs	r2, #95	; 0x5f
 80005aa:	2100      	movs	r1, #0
 80005ac:	2000      	movs	r0, #0
 80005ae:	f000 fc3a 	bl	8000e26 <SSD1331_clearWindow>
		HAL_Delay(1);
 80005b2:	2001      	movs	r0, #1
 80005b4:	f000 fe4c 	bl	8001250 <HAL_Delay>
		for (int i=1; i < 30; i++)
 80005b8:	e7de      	b.n	8000578 <main+0x60>
 80005ba:	bf00      	nop
 80005bc:	080030d4 	.word	0x080030d4
 80005c0:	08002aa0 	.word	0x08002aa0
 80005c4:	08003fdc 	.word	0x08003fdc
 80005c8:	08002aa8 	.word	0x08002aa8
 80005cc:	08003724 	.word	0x08003724
 80005d0:	08002ab0 	.word	0x08002ab0

080005d4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	; 0x50
 80005d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	2234      	movs	r2, #52	; 0x34
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 fa48 	bl	8002a78 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	4b29      	ldr	r3, [pc, #164]	; (80006a4 <SystemClock_Config+0xd0>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a28      	ldr	r2, [pc, #160]	; (80006a4 <SystemClock_Config+0xd0>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <SystemClock_Config+0xd0>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000614:	2300      	movs	r3, #0
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	4b23      	ldr	r3, [pc, #140]	; (80006a8 <SystemClock_Config+0xd4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000620:	4a21      	ldr	r2, [pc, #132]	; (80006a8 <SystemClock_Config+0xd4>)
 8000622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <SystemClock_Config+0xd4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000634:	2302      	movs	r3, #2
 8000636:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063c:	2310      	movs	r3, #16
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000640:	2302      	movs	r3, #2
 8000642:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000644:	2300      	movs	r3, #0
 8000646:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000648:	2308      	movs	r3, #8
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 72;
 800064c:	2348      	movs	r3, #72	; 0x48
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000654:	2302      	movs	r3, #2
 8000656:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000658:	2302      	movs	r3, #2
 800065a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4618      	mov	r0, r3
 8000662:	f001 fb8b 	bl	8001d7c <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 800066c:	f000 f898 	bl	80007a0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2302      	movs	r3, #2
 8000676:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800067c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000680:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	2102      	movs	r1, #2
 800068c:	4618      	mov	r0, r3
 800068e:	f001 f8e5 	bl	800185c <HAL_RCC_ClockConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xc8>
	{
		Error_Handler();
 8000698:	f000 f882 	bl	80007a0 <Error_Handler>
	}
}
 800069c:	bf00      	nop
 800069e:	3750      	adds	r7, #80	; 0x50
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_SPI2_Init+0x64>)
 80006b2:	4a18      	ldr	r2, [pc, #96]	; (8000714 <MX_SPI2_Init+0x68>)
 80006b4:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <MX_SPI2_Init+0x64>)
 80006b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006bc:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_SPI2_Init+0x64>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_SPI2_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_SPI2_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_SPI2_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_SPI2_Init+0x64>)
 80006d8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80006dc:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_SPI2_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <MX_SPI2_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_SPI2_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <MX_SPI2_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_SPI2_Init+0x64>)
 80006f8:	220a      	movs	r2, #10
 80006fa:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_SPI2_Init+0x64>)
 80006fe:	f001 fddb 	bl	80022b8 <HAL_SPI_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_SPI2_Init+0x60>
	{
		Error_Handler();
 8000708:	f000 f84a 	bl	80007a0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000028 	.word	0x20000028
 8000714:	40003800 	.word	0x40003800

08000718 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <MX_GPIO_Init+0x80>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a18      	ldr	r2, [pc, #96]	; (8000798 <MX_GPIO_Init+0x80>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_GPIO_Init+0x80>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_GPIO_Init+0x80>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a11      	ldr	r2, [pc, #68]	; (8000798 <MX_GPIO_Init+0x80>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_GPIO_Init+0x80>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800076c:	480b      	ldr	r0, [pc, #44]	; (800079c <MX_GPIO_Init+0x84>)
 800076e:	f001 f85b 	bl	8001828 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LCD_DC_Pin */
	GPIO_InitStruct.Pin = LCD_DC_Pin;
 8000772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000776:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	4619      	mov	r1, r3
 800078a:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_GPIO_Init+0x84>)
 800078c:	f000 feb8 	bl	8001500 <HAL_GPIO_Init>

}
 8000790:	bf00      	nop
 8000792:	3720      	adds	r7, #32
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40020400 	.word	0x40020400

080007a0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80007a8:	e7fe      	b.n	80007a8 <Error_Handler+0x8>

080007aa <H24_RGB565>:
{   
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
}

inline static uint16_t H24_RGB565(uint8_t reverse, uint32_t color24)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b085      	sub	sp, #20
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	6039      	str	r1, [r7, #0]
 80007b4:	71fb      	strb	r3, [r7, #7]
	uint8_t b = (color24 >> 16) & 0xFF;
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	0c1b      	lsrs	r3, r3, #16
 80007ba:	73fb      	strb	r3, [r7, #15]
	uint8_t g = (color24 >> 8) & 0xFF;
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	0a1b      	lsrs	r3, r3, #8
 80007c0:	73bb      	strb	r3, [r7, #14]
	uint8_t r = color24 & 0xFF;
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	737b      	strb	r3, [r7, #13]
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d013      	beq.n	80007f4 <H24_RGB565+0x4a>
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	08db      	lsrs	r3, r3, #3
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	02db      	lsls	r3, r3, #11
 80007d4:	b21a      	sxth	r2, r3
 80007d6:	7bbb      	ldrb	r3, [r7, #14]
 80007d8:	089b      	lsrs	r3, r3, #2
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	015b      	lsls	r3, r3, #5
 80007de:	b21b      	sxth	r3, r3
 80007e0:	4313      	orrs	r3, r2
 80007e2:	b21a      	sxth	r2, r3
 80007e4:	7b7b      	ldrb	r3, [r7, #13]
 80007e6:	08db      	lsrs	r3, r3, #3
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	b21b      	sxth	r3, r3
 80007ec:	4313      	orrs	r3, r2
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	e012      	b.n	800081a <H24_RGB565+0x70>
	else return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8);
 80007f4:	7b7b      	ldrb	r3, [r7, #13]
 80007f6:	08db      	lsrs	r3, r3, #3
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	02db      	lsls	r3, r3, #11
 80007fc:	b21a      	sxth	r2, r3
 80007fe:	7bbb      	ldrb	r3, [r7, #14]
 8000800:	089b      	lsrs	r3, r3, #2
 8000802:	b2db      	uxtb	r3, r3
 8000804:	015b      	lsls	r3, r3, #5
 8000806:	b21b      	sxth	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	b21a      	sxth	r2, r3
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	08db      	lsrs	r3, r3, #3
 8000810:	b2db      	uxtb	r3, r3
 8000812:	b21b      	sxth	r3, r3
 8000814:	4313      	orrs	r3, r2
 8000816:	b21b      	sxth	r3, r3
 8000818:	b29b      	uxth	r3, r3
}
 800081a:	4618      	mov	r0, r3
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
	...

08000828 <LCD_Command>:

inline static void LCD_Command(uint8_t cmd)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
if (SOFT_CS) LCD_U_CS
	LCD_U_DC
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000838:	4806      	ldr	r0, [pc, #24]	; (8000854 <LCD_Command+0x2c>)
 800083a:	f000 fff5 	bl	8001828 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&LCD_SPI, &cmd, 1, 1000);			
 800083e:	1df9      	adds	r1, r7, #7
 8000840:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000844:	2201      	movs	r2, #1
 8000846:	4804      	ldr	r0, [pc, #16]	; (8000858 <LCD_Command+0x30>)
 8000848:	f001 fdbf 	bl	80023ca <HAL_SPI_Transmit>
if (SOFT_CS) LCD_S_CS
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40020400 	.word	0x40020400
 8000858:	20000028 	.word	0x20000028

0800085c <SSD1331_Frame>:
	HAL_SPI_Transmit(&LCD_SPI, &data, 1, 1000);
if (SOFT_CS) LCD_S_CS
}

void SSD1331_Frame(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint32_t outColor, uint32_t fillColor)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4604      	mov	r4, r0
 8000864:	4608      	mov	r0, r1
 8000866:	4611      	mov	r1, r2
 8000868:	461a      	mov	r2, r3
 800086a:	4623      	mov	r3, r4
 800086c:	80fb      	strh	r3, [r7, #6]
 800086e:	4603      	mov	r3, r0
 8000870:	80bb      	strh	r3, [r7, #4]
 8000872:	460b      	mov	r3, r1
 8000874:	807b      	strh	r3, [r7, #2]
 8000876:	4613      	mov	r3, r2
 8000878:	803b      	strh	r3, [r7, #0]
	LCD_Command(CMD_FILL_WINDOW);//fill window
 800087a:	2026      	movs	r0, #38	; 0x26
 800087c:	f7ff ffd4 	bl	8000828 <LCD_Command>
	LCD_Command(ENABLE_FILL);
 8000880:	2001      	movs	r0, #1
 8000882:	f7ff ffd1 	bl	8000828 <LCD_Command>
	LCD_Command(CMD_DRAW_RECTANGLE);//draw rectangle
 8000886:	2022      	movs	r0, #34	; 0x22
 8000888:	f7ff ffce 	bl	8000828 <LCD_Command>
	LCD_Command(x0);//start column
 800088c:	88fb      	ldrh	r3, [r7, #6]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ffc9 	bl	8000828 <LCD_Command>
	LCD_Command(y0);//start row
 8000896:	88bb      	ldrh	r3, [r7, #4]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ffc4 	bl	8000828 <LCD_Command>
	LCD_Command(x1);//end column
 80008a0:	887b      	ldrh	r3, [r7, #2]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ffbf 	bl	8000828 <LCD_Command>
	LCD_Command(y1);//end row
 80008aa:	883b      	ldrh	r3, [r7, #0]
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff ffba 	bl	8000828 <LCD_Command>
	
	outColor = H24_RGB565(1, outColor);
 80008b4:	69b9      	ldr	r1, [r7, #24]
 80008b6:	2001      	movs	r0, #1
 80008b8:	f7ff ff77 	bl	80007aa <H24_RGB565>
 80008bc:	4603      	mov	r3, r0
 80008be:	61bb      	str	r3, [r7, #24]
	fillColor = H24_RGB565(1, fillColor);
 80008c0:	69f9      	ldr	r1, [r7, #28]
 80008c2:	2001      	movs	r0, #1
 80008c4:	f7ff ff71 	bl	80007aa <H24_RGB565>
 80008c8:	4603      	mov	r3, r0
 80008ca:	61fb      	str	r3, [r7, #28]
	
	LCD_Command((uint8_t)((outColor>>11)&0x1F));//R
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	0adb      	lsrs	r3, r3, #11
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	f003 031f 	and.w	r3, r3, #31
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ffa5 	bl	8000828 <LCD_Command>
	LCD_Command((uint8_t)((outColor>>5)&0x3F));//G
 80008de:	69bb      	ldr	r3, [r7, #24]
 80008e0:	095b      	lsrs	r3, r3, #5
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff ff9c 	bl	8000828 <LCD_Command>
	LCD_Command((uint8_t)(outColor&0x1F));//B
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	f003 031f 	and.w	r3, r3, #31
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ff94 	bl	8000828 <LCD_Command>
	LCD_Command((uint8_t)((fillColor>>11)&0x1F));//R
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	0adb      	lsrs	r3, r3, #11
 8000904:	b2db      	uxtb	r3, r3
 8000906:	f003 031f 	and.w	r3, r3, #31
 800090a:	b2db      	uxtb	r3, r3
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff8b 	bl	8000828 <LCD_Command>
	LCD_Command((uint8_t)((fillColor>>5)&0x3F));//G
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	095b      	lsrs	r3, r3, #5
 8000916:	b2db      	uxtb	r3, r3
 8000918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800091c:	b2db      	uxtb	r3, r3
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ff82 	bl	8000828 <LCD_Command>
	LCD_Command((uint8_t)(fillColor&0x1F));//B
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	b2db      	uxtb	r3, r3
 8000928:	f003 031f 	and.w	r3, r3, #31
 800092c:	b2db      	uxtb	r3, r3
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff ff7a 	bl	8000828 <LCD_Command>
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	bd90      	pop	{r4, r7, pc}

0800093c <LCD_Rect_Fill>:

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b085      	sub	sp, #20
 8000940:	af02      	add	r7, sp, #8
 8000942:	4604      	mov	r4, r0
 8000944:	4608      	mov	r0, r1
 8000946:	4611      	mov	r1, r2
 8000948:	461a      	mov	r2, r3
 800094a:	4623      	mov	r3, r4
 800094c:	80fb      	strh	r3, [r7, #6]
 800094e:	4603      	mov	r3, r0
 8000950:	80bb      	strh	r3, [r7, #4]
 8000952:	460b      	mov	r3, r1
 8000954:	807b      	strh	r3, [r7, #2]
 8000956:	4613      	mov	r3, r2
 8000958:	803b      	strh	r3, [r7, #0]
	SSD1331_Frame(x, y, x + w, y + h, color24, color24);
 800095a:	88fa      	ldrh	r2, [r7, #6]
 800095c:	887b      	ldrh	r3, [r7, #2]
 800095e:	4413      	add	r3, r2
 8000960:	b29c      	uxth	r4, r3
 8000962:	88ba      	ldrh	r2, [r7, #4]
 8000964:	883b      	ldrh	r3, [r7, #0]
 8000966:	4413      	add	r3, r2
 8000968:	b29a      	uxth	r2, r3
 800096a:	88b9      	ldrh	r1, [r7, #4]
 800096c:	88f8      	ldrh	r0, [r7, #6]
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	9301      	str	r3, [sp, #4]
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	9300      	str	r3, [sp, #0]
 8000976:	4613      	mov	r3, r2
 8000978:	4622      	mov	r2, r4
 800097a:	f7ff ff6f 	bl	800085c <SSD1331_Frame>
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	bd90      	pop	{r4, r7, pc}

08000986 <LCD_Circle>:
		}
	}
}

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
{
 8000986:	b590      	push	{r4, r7, lr}
 8000988:	b089      	sub	sp, #36	; 0x24
 800098a:	af02      	add	r7, sp, #8
 800098c:	4604      	mov	r4, r0
 800098e:	4608      	mov	r0, r1
 8000990:	4611      	mov	r1, r2
 8000992:	461a      	mov	r2, r3
 8000994:	4623      	mov	r3, r4
 8000996:	80fb      	strh	r3, [r7, #6]
 8000998:	4603      	mov	r3, r0
 800099a:	80bb      	strh	r3, [r7, #4]
 800099c:	460b      	mov	r3, r1
 800099e:	70fb      	strb	r3, [r7, #3]
 80009a0:	4613      	mov	r3, r2
 80009a2:	70bb      	strb	r3, [r7, #2]
	int a_, b_, P;
	a_ = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
	b_ = radius;
 80009a8:	78fb      	ldrb	r3, [r7, #3]
 80009aa:	613b      	str	r3, [r7, #16]
	P = 1 - radius;
 80009ac:	78fb      	ldrb	r3, [r7, #3]
 80009ae:	f1c3 0301 	rsb	r3, r3, #1
 80009b2:	60fb      	str	r3, [r7, #12]
	while (a_ <= b_)
 80009b4:	e0fc      	b.n	8000bb0 <LCD_Circle+0x22a>
	{
		if (fill == 1)
 80009b6:	78bb      	ldrb	r3, [r7, #2]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d136      	bne.n	8000a2a <LCD_Circle+0xa4>
		{
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	88fa      	ldrh	r2, [r7, #6]
 80009c2:	1ad3      	subs	r3, r2, r3
 80009c4:	b298      	uxth	r0, r3
 80009c6:	693b      	ldr	r3, [r7, #16]
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	88ba      	ldrh	r2, [r7, #4]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	b299      	uxth	r1, r3
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	3301      	adds	r3, #1
 80009da:	b29a      	uxth	r2, r3
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	b29b      	uxth	r3, r3
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	3301      	adds	r3, #1
 80009e6:	b29c      	uxth	r4, r3
 80009e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	4623      	mov	r3, r4
 80009ee:	f7ff ffa5 	bl	800093c <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	88fa      	ldrh	r2, [r7, #6]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	b298      	uxth	r0, r3
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	88ba      	ldrh	r2, [r7, #4]
 8000a02:	1ad3      	subs	r3, r2, r3
 8000a04:	b299      	uxth	r1, r3
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	3301      	adds	r3, #1
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	b29c      	uxth	r4, r3
 8000a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	4623      	mov	r3, r4
 8000a24:	f7ff ff8a 	bl	800093c <LCD_Rect_Fill>
 8000a28:	e0a7      	b.n	8000b7a <LCD_Circle+0x1f4>
		}
		else
		{
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	88fb      	ldrh	r3, [r7, #6]
 8000a30:	4413      	add	r3, r2
 8000a32:	b298      	uxth	r0, r3
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	88bb      	ldrh	r3, [r7, #4]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	b299      	uxth	r1, r3
 8000a3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000a48:	b29c      	uxth	r4, r3
 8000a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4c:	9300      	str	r3, [sp, #0]
 8000a4e:	4623      	mov	r3, r4
 8000a50:	f7ff ff74 	bl	800093c <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	88fb      	ldrh	r3, [r7, #6]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	b298      	uxth	r0, r3
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	88bb      	ldrh	r3, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	b299      	uxth	r1, r3
 8000a68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000a72:	b29c      	uxth	r4, r3
 8000a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	4623      	mov	r3, r4
 8000a7a:	f7ff ff5f 	bl	800093c <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	88fa      	ldrh	r2, [r7, #6]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	b298      	uxth	r0, r3
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	88bb      	ldrh	r3, [r7, #4]
 8000a8e:	4413      	add	r3, r2
 8000a90:	b299      	uxth	r1, r3
 8000a92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000a9c:	b29c      	uxth	r4, r3
 8000a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	4623      	mov	r3, r4
 8000aa4:	f7ff ff4a 	bl	800093c <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	88fa      	ldrh	r2, [r7, #6]
 8000aae:	1ad3      	subs	r3, r2, r3
 8000ab0:	b298      	uxth	r0, r3
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	88bb      	ldrh	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	b299      	uxth	r1, r3
 8000abc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ac6:	b29c      	uxth	r4, r3
 8000ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	4623      	mov	r3, r4
 8000ace:	f7ff ff35 	bl	800093c <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	88fb      	ldrh	r3, [r7, #6]
 8000ad8:	4413      	add	r3, r2
 8000ada:	b298      	uxth	r0, r3
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	88ba      	ldrh	r2, [r7, #4]
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	b299      	uxth	r1, r3
 8000ae6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000af0:	b29c      	uxth	r4, r3
 8000af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	4623      	mov	r3, r4
 8000af8:	f7ff ff20 	bl	800093c <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	88fb      	ldrh	r3, [r7, #6]
 8000b02:	4413      	add	r3, r2
 8000b04:	b298      	uxth	r0, r3
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	88ba      	ldrh	r2, [r7, #4]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	b299      	uxth	r1, r3
 8000b10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b1a:	b29c      	uxth	r4, r3
 8000b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	4623      	mov	r3, r4
 8000b22:	f7ff ff0b 	bl	800093c <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	88fa      	ldrh	r2, [r7, #6]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	b298      	uxth	r0, r3
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	88ba      	ldrh	r2, [r7, #4]
 8000b36:	1ad3      	subs	r3, r2, r3
 8000b38:	b299      	uxth	r1, r3
 8000b3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b44:	b29c      	uxth	r4, r3
 8000b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	4623      	mov	r3, r4
 8000b4c:	f7ff fef6 	bl	800093c <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	88fa      	ldrh	r2, [r7, #6]
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	b298      	uxth	r0, r3
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	88ba      	ldrh	r2, [r7, #4]
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	b299      	uxth	r1, r3
 8000b64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b6e:	b29c      	uxth	r4, r3
 8000b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	4623      	mov	r3, r4
 8000b76:	f7ff fee1 	bl	800093c <LCD_Rect_Fill>
		}
		if (P < 0)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	da09      	bge.n	8000b94 <LCD_Circle+0x20e>
		{
			P = (P + 3) + (2 * a_);
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	1cda      	adds	r2, r3, #3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	4413      	add	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]
			a_++;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	e00d      	b.n	8000bb0 <LCD_Circle+0x22a>
		}
		else
		{
			P = (P + 5) + (2 * (a_ - b_));
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	1d5a      	adds	r2, r3, #5
 8000b98:	6979      	ldr	r1, [r7, #20]
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	1acb      	subs	r3, r1, r3
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	4413      	add	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]
			a_++;
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	617b      	str	r3, [r7, #20]
			b_--;
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	613b      	str	r3, [r7, #16]
	while (a_ <= b_)
 8000bb0:	697a      	ldr	r2, [r7, #20]
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	f77f aefe 	ble.w	80009b6 <LCD_Circle+0x30>
		}
	}
}
 8000bba:	bf00      	nop
 8000bbc:	bf00      	nop
 8000bbe:	371c      	adds	r7, #28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd90      	pop	{r4, r7, pc}

08000bc4 <LCD_Char>:
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
}

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b08b      	sub	sp, #44	; 0x2c
 8000bc8:	af02      	add	r7, sp, #8
 8000bca:	60ba      	str	r2, [r7, #8]
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4603      	mov	r3, r0
 8000bd0:	81fb      	strh	r3, [r7, #14]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	777b      	strb	r3, [r7, #29]
 8000be6:	2300      	movs	r3, #0
 8000be8:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for (cur_y = 0; cur_y < glyph -> height; cur_y++)
 8000bee:	2300      	movs	r3, #0
 8000bf0:	763b      	strb	r3, [r7, #24]
 8000bf2:	e093      	b.n	8000d1c <LCD_Char+0x158>
	{
		for (cur_x = 0; cur_x < glyph -> width; cur_x++)
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	767b      	strb	r3, [r7, #25]
 8000bf8:	e052      	b.n	8000ca0 <LCD_Char+0xdc>
		{
			if (bit == 0)
 8000bfa:	7f3b      	ldrb	r3, [r7, #28]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d109      	bne.n	8000c14 <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8000c00:	8bfb      	ldrh	r3, [r7, #30]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	83fa      	strh	r2, [r7, #30]
 8000c06:	461a      	mov	r2, r3
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	773b      	strb	r3, [r7, #28]
			}
			if (bits & bit) set_pixels++;
 8000c14:	7f7a      	ldrb	r2, [r7, #29]
 8000c16:	7f3b      	ldrb	r3, [r7, #28]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d003      	beq.n	8000c28 <LCD_Char+0x64>
 8000c20:	8b7b      	ldrh	r3, [r7, #26]
 8000c22:	3301      	adds	r3, #1
 8000c24:	837b      	strh	r3, [r7, #26]
 8000c26:	e035      	b.n	8000c94 <LCD_Char+0xd0>
			else if (set_pixels > 0)
 8000c28:	8b7b      	ldrh	r3, [r7, #26]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d032      	beq.n	8000c94 <LCD_Char+0xd0>
			{
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000c34:	461a      	mov	r2, r3
 8000c36:	7e7b      	ldrb	r3, [r7, #25]
 8000c38:	441a      	add	r2, r3
 8000c3a:	8b7b      	ldrh	r3, [r7, #26]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	fb12 f303 	smulbb	r3, r2, r3
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	89fb      	ldrh	r3, [r7, #14]
 8000c4e:	4413      	add	r3, r2
 8000c50:	b298      	uxth	r0, r3
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	7e3b      	ldrb	r3, [r7, #24]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	fb12 f303 	smulbb	r3, r2, r3
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	89bb      	ldrh	r3, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	b299      	uxth	r1, r3
 8000c72:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	8b7a      	ldrh	r2, [r7, #26]
 8000c7a:	fb12 f303 	smulbb	r3, r2, r3
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c84:	b29c      	uxth	r4, r3
 8000c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	4623      	mov	r3, r4
 8000c8c:	f7ff fe56 	bl	800093c <LCD_Rect_Fill>
				set_pixels = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 8000c94:	7f3b      	ldrb	r3, [r7, #28]
 8000c96:	085b      	lsrs	r3, r3, #1
 8000c98:	773b      	strb	r3, [r7, #28]
		for (cur_x = 0; cur_x < glyph -> width; cur_x++)
 8000c9a:	7e7b      	ldrb	r3, [r7, #25]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	767b      	strb	r3, [r7, #25]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	789b      	ldrb	r3, [r3, #2]
 8000ca4:	7e7a      	ldrb	r2, [r7, #25]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d3a7      	bcc.n	8000bfa <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 8000caa:	8b7b      	ldrh	r3, [r7, #26]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d032      	beq.n	8000d16 <LCD_Char+0x152>
		{
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	7e7b      	ldrb	r3, [r7, #25]
 8000cba:	441a      	add	r2, r3
 8000cbc:	8b7b      	ldrh	r3, [r7, #26]
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	b29a      	uxth	r2, r3
 8000cc2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	fb12 f303 	smulbb	r3, r2, r3
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	89fb      	ldrh	r3, [r7, #14]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	b298      	uxth	r0, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	7e3b      	ldrb	r3, [r7, #24]
 8000cde:	4413      	add	r3, r2
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	fb12 f303 	smulbb	r3, r2, r3
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	89bb      	ldrh	r3, [r7, #12]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	b299      	uxth	r1, r3
 8000cf4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	8b7a      	ldrh	r2, [r7, #26]
 8000cfc:	fb12 f303 	smulbb	r3, r2, r3
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d06:	b29c      	uxth	r4, r3
 8000d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	4623      	mov	r3, r4
 8000d0e:	f7ff fe15 	bl	800093c <LCD_Rect_Fill>
			set_pixels = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	837b      	strh	r3, [r7, #26]
	for (cur_y = 0; cur_y < glyph -> height; cur_y++)
 8000d16:	7e3b      	ldrb	r3, [r7, #24]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	763b      	strb	r3, [r7, #24]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	78db      	ldrb	r3, [r3, #3]
 8000d20:	7e3a      	ldrb	r2, [r7, #24]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	f4ff af66 	bcc.w	8000bf4 <LCD_Char+0x30>
		}
	}
}
 8000d28:	bf00      	nop
 8000d2a:	bf00      	nop
 8000d2c:	3724      	adds	r7, #36	; 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd90      	pop	{r4, r7, pc}

08000d32 <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 8000d32:	b590      	push	{r4, r7, lr}
 8000d34:	b08f      	sub	sp, #60	; 0x3c
 8000d36:	af02      	add	r7, sp, #8
 8000d38:	60ba      	str	r2, [r7, #8]
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	81fb      	strh	r3, [r7, #14]
 8000d40:	460b      	mov	r3, r1
 8000d42:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 8000d44:	89fb      	ldrh	r3, [r7, #14]
 8000d46:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 8000d48:	89bb      	ldrh	r3, [r7, #12]
 8000d4a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy(&font, p_font, sizeof(GFXfont));
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	220c      	movs	r2, #12
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f001 fe81 	bl	8002a5c <memcpy>
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000d5e:	e056      	b.n	8000e0e <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 8000d60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	4413      	add	r3, r2
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if (c == '\n')
 8000d6c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000d70:	2b0a      	cmp	r3, #10
 8000d72:	d10f      	bne.n	8000d94 <LCD_Font+0x62>
		{
			cursor_x = x;
 8000d74:	89fb      	ldrh	r3, [r7, #14]
 8000d76:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 8000d78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	fb12 f303 	smulbb	r3, r2, r3
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000d8c:	4413      	add	r3, r2
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000d92:	e039      	b.n	8000e08 <LCD_Font+0xd6>
		}
		else if (c >= font.first && c <= font.last && c != '\r')
 8000d94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d98:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d333      	bcc.n	8000e08 <LCD_Font+0xd6>
 8000da0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000da4:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d82d      	bhi.n	8000e08 <LCD_Font+0xd6>
 8000dac:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000db0:	2b0d      	cmp	r3, #13
 8000db2:	d029      	beq.n	8000e08 <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy(&glyph, &font.glyph[c - font.first], sizeof(GFXglyph));
 8000db4:	6a3a      	ldr	r2, [r7, #32]
 8000db6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000dba:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000dbe:	1a5b      	subs	r3, r3, r1
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	18d1      	adds	r1, r2, r3
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2208      	movs	r2, #8
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f001 fe46 	bl	8002a5c <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8000dd0:	f107 041c 	add.w	r4, r7, #28
 8000dd4:	f107 0214 	add.w	r2, r7, #20
 8000dd8:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8000ddc:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8000de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000de8:	9300      	str	r3, [sp, #0]
 8000dea:	4623      	mov	r3, r4
 8000dec:	f7ff feea 	bl	8000bc4 <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 8000df0:	7e3b      	ldrb	r3, [r7, #24]
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	fb12 f303 	smulbb	r3, r2, r3
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000e02:	4413      	add	r3, r2
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8000e08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000e0e:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8000e10:	68b8      	ldr	r0, [r7, #8]
 8000e12:	f7ff f9f7 	bl	8000204 <strlen>
 8000e16:	4603      	mov	r3, r0
 8000e18:	429c      	cmp	r4, r3
 8000e1a:	d3a1      	bcc.n	8000d60 <LCD_Font+0x2e>
		}
	}
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3734      	adds	r7, #52	; 0x34
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd90      	pop	{r4, r7, pc}

08000e26 <SSD1331_clearWindow>:
	LCD_Command(x1);//end column
	LCD_Command(y1);//end row
}

void SSD1331_clearWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8000e26:	b590      	push	{r4, r7, lr}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4604      	mov	r4, r0
 8000e2e:	4608      	mov	r0, r1
 8000e30:	4611      	mov	r1, r2
 8000e32:	461a      	mov	r2, r3
 8000e34:	4623      	mov	r3, r4
 8000e36:	80fb      	strh	r3, [r7, #6]
 8000e38:	4603      	mov	r3, r0
 8000e3a:	80bb      	strh	r3, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	807b      	strh	r3, [r7, #2]
 8000e40:	4613      	mov	r3, r2
 8000e42:	803b      	strh	r3, [r7, #0]
	LCD_Command(CMD_CLEAR_WINDOW);//clear window
 8000e44:	2025      	movs	r0, #37	; 0x25
 8000e46:	f7ff fcef 	bl	8000828 <LCD_Command>
	LCD_Command(x0);//start column
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fcea 	bl	8000828 <LCD_Command>
	LCD_Command(y0);//start row
 8000e54:	88bb      	ldrh	r3, [r7, #4]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fce5 	bl	8000828 <LCD_Command>
	LCD_Command(x1);//end column
 8000e5e:	887b      	ldrh	r3, [r7, #2]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fce0 	bl	8000828 <LCD_Command>
	LCD_Command(y1);//end row
 8000e68:	883b      	ldrh	r3, [r7, #0]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fcdb 	bl	8000828 <LCD_Command>
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd90      	pop	{r4, r7, pc}

08000e7a <SSD1331_Init>:
{
	LCD_Command(power);
}

void SSD1331_Init(void)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	af00      	add	r7, sp, #0
	LCD_Command(CMD_DISPLAY_OFF);          //Display Off
 8000e7e:	20ae      	movs	r0, #174	; 0xae
 8000e80:	f7ff fcd2 	bl	8000828 <LCD_Command>
	LCD_Command(CMD_SET_CONTRAST_A);       //Set contrast for color A
 8000e84:	2081      	movs	r0, #129	; 0x81
 8000e86:	f7ff fccf 	bl	8000828 <LCD_Command>
	LCD_Command(0x91);                     //145 (0x91)
 8000e8a:	2091      	movs	r0, #145	; 0x91
 8000e8c:	f7ff fccc 	bl	8000828 <LCD_Command>
	LCD_Command(CMD_SET_CONTRAST_B);       //Set contrast for color B
 8000e90:	2082      	movs	r0, #130	; 0x82
 8000e92:	f7ff fcc9 	bl	8000828 <LCD_Command>
	LCD_Command(0x50);                     //80 (0x50)
 8000e96:	2050      	movs	r0, #80	; 0x50
 8000e98:	f7ff fcc6 	bl	8000828 <LCD_Command>
	LCD_Command(CMD_SET_CONTRAST_C);       //Set contrast for color C
 8000e9c:	2083      	movs	r0, #131	; 0x83
 8000e9e:	f7ff fcc3 	bl	8000828 <LCD_Command>
	LCD_Command(0x7D);                     //125 (0x7D)
 8000ea2:	207d      	movs	r0, #125	; 0x7d
 8000ea4:	f7ff fcc0 	bl	8000828 <LCD_Command>
	LCD_Command(CMD_MASTER_CURRENT_CONTROL);//master current control
 8000ea8:	2087      	movs	r0, #135	; 0x87
 8000eaa:	f7ff fcbd 	bl	8000828 <LCD_Command>
	LCD_Command(0x06);                     //6
 8000eae:	2006      	movs	r0, #6
 8000eb0:	f7ff fcba 	bl	8000828 <LCD_Command>
	LCD_Command(CMD_SET_PRECHARGE_SPEED_A);//Set Second Pre-change Speed For ColorA
 8000eb4:	208a      	movs	r0, #138	; 0x8a
 8000eb6:	f7ff fcb7 	bl	8000828 <LCD_Command>
	LCD_Command(0x64);                     //100
 8000eba:	2064      	movs	r0, #100	; 0x64
 8000ebc:	f7ff fcb4 	bl	8000828 <LCD_Command>
	LCD_Command(CMD_SET_PRECHARGE_SPEED_B);//Set Second Pre-change Speed For ColorB
 8000ec0:	208b      	movs	r0, #139	; 0x8b
 8000ec2:	f7ff fcb1 	bl	8000828 <LCD_Command>
	LCD_Command(0x78);                     //120
 8000ec6:	2078      	movs	r0, #120	; 0x78
 8000ec8:	f7ff fcae 	bl	8000828 <LCD_Command>
	LCD_Command(CMD_SET_PRECHARGE_SPEED_C);//Set Second Pre-change Speed For ColorC
 8000ecc:	208c      	movs	r0, #140	; 0x8c
 8000ece:	f7ff fcab 	bl	8000828 <LCD_Command>
	LCD_Command(0x64);                     //100
 8000ed2:	2064      	movs	r0, #100	; 0x64
 8000ed4:	f7ff fca8 	bl	8000828 <LCD_Command>
	LCD_Command(CMD_SET_REMAP);            //set remap & data format
 8000ed8:	20a0      	movs	r0, #160	; 0xa0
 8000eda:	f7ff fca5 	bl	8000828 <LCD_Command>
	LCD_Command(0x72);                     //0x72
 8000ede:	2072      	movs	r0, #114	; 0x72
 8000ee0:	f7ff fca2 	bl	8000828 <LCD_Command>
	LCD_Command(CMD_SET_DISPLAY_START_LINE);//Set display Start Line
 8000ee4:	20a1      	movs	r0, #161	; 0xa1
 8000ee6:	f7ff fc9f 	bl	8000828 <LCD_Command>
	LCD_Command(0x0);
 8000eea:	2000      	movs	r0, #0
 8000eec:	f7ff fc9c 	bl	8000828 <LCD_Command>
	LCD_Command(CMD_SET_DISPLAY_OFFSET);   //Set display offset
 8000ef0:	20a2      	movs	r0, #162	; 0xa2
 8000ef2:	f7ff fc99 	bl	8000828 <LCD_Command>
	LCD_Command(0x0);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f7ff fc96 	bl	8000828 <LCD_Command>
	LCD_Command(CMD_NORMAL_DISPLAY);       //Set display mode
 8000efc:	20a4      	movs	r0, #164	; 0xa4
 8000efe:	f7ff fc93 	bl	8000828 <LCD_Command>
	LCD_Command(CMD_SET_MULTIPLEX_RATIO);  //Set multiplex ratio
 8000f02:	20a8      	movs	r0, #168	; 0xa8
 8000f04:	f7ff fc90 	bl	8000828 <LCD_Command>
	LCD_Command(0x3F);
 8000f08:	203f      	movs	r0, #63	; 0x3f
 8000f0a:	f7ff fc8d 	bl	8000828 <LCD_Command>
	LCD_Command(CMD_SET_MASTER_CONFIGURE); //Set master configuration
 8000f0e:	20ad      	movs	r0, #173	; 0xad
 8000f10:	f7ff fc8a 	bl	8000828 <LCD_Command>
	LCD_Command(0x8E);
 8000f14:	208e      	movs	r0, #142	; 0x8e
 8000f16:	f7ff fc87 	bl	8000828 <LCD_Command>
	LCD_Command(CMD_POWER_SAVE_MODE);      //Set Power Save Mode
 8000f1a:	20b0      	movs	r0, #176	; 0xb0
 8000f1c:	f7ff fc84 	bl	8000828 <LCD_Command>
	LCD_Command(0x00);                     //0x00
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff fc81 	bl	8000828 <LCD_Command>
	LCD_Command(CMD_PHASE_PERIOD_ADJUSTMENT);//phase 1 and 2 period adjustment
 8000f26:	20b1      	movs	r0, #177	; 0xb1
 8000f28:	f7ff fc7e 	bl	8000828 <LCD_Command>
	LCD_Command(0x31);                     //0x31
 8000f2c:	2031      	movs	r0, #49	; 0x31
 8000f2e:	f7ff fc7b 	bl	8000828 <LCD_Command>
	LCD_Command(CMD_DISPLAY_CLOCK_DIV);    //display clock divider/oscillator frequency
 8000f32:	20b3      	movs	r0, #179	; 0xb3
 8000f34:	f7ff fc78 	bl	8000828 <LCD_Command>
	LCD_Command(0xF0);
 8000f38:	20f0      	movs	r0, #240	; 0xf0
 8000f3a:	f7ff fc75 	bl	8000828 <LCD_Command>
	LCD_Command(CMD_SET_PRECHARGE_VOLTAGE);//Set Pre-Change Level
 8000f3e:	20bb      	movs	r0, #187	; 0xbb
 8000f40:	f7ff fc72 	bl	8000828 <LCD_Command>
	LCD_Command(0x3A);
 8000f44:	203a      	movs	r0, #58	; 0x3a
 8000f46:	f7ff fc6f 	bl	8000828 <LCD_Command>
	LCD_Command(CMD_SET_V_VOLTAGE);        //Set vcomH
 8000f4a:	20be      	movs	r0, #190	; 0xbe
 8000f4c:	f7ff fc6c 	bl	8000828 <LCD_Command>
	LCD_Command(0x3E);
 8000f50:	203e      	movs	r0, #62	; 0x3e
 8000f52:	f7ff fc69 	bl	8000828 <LCD_Command>
	LCD_Command(CMD_DEACTIVE_SCROLLING);   //disable scrolling
 8000f56:	202e      	movs	r0, #46	; 0x2e
 8000f58:	f7ff fc66 	bl	8000828 <LCD_Command>
	LCD_Command(CMD_NORMAL_BRIGHTNESS_DISPLAY_ON);//set display on
 8000f5c:	20af      	movs	r0, #175	; 0xaf
 8000f5e:	f7ff fc63 	bl	8000828 <LCD_Command>

	SSD1331_clearWindow(0, 0, 95, 63);
 8000f62:	233f      	movs	r3, #63	; 0x3f
 8000f64:	225f      	movs	r2, #95	; 0x5f
 8000f66:	2100      	movs	r1, #0
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f7ff ff5c 	bl	8000e26 <SSD1331_clearWindow>
	HAL_Delay(1);
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f000 f96e 	bl	8001250 <HAL_Delay>
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <HAL_MspInit+0x4c>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	4a0f      	ldr	r2, [pc, #60]	; (8000fc4 <HAL_MspInit+0x4c>)
 8000f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <HAL_MspInit+0x4c>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	603b      	str	r3, [r7, #0]
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <HAL_MspInit+0x4c>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	4a08      	ldr	r2, [pc, #32]	; (8000fc4 <HAL_MspInit+0x4c>)
 8000fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_MspInit+0x4c>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40023800 	.word	0x40023800

08000fc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a26      	ldr	r2, [pc, #152]	; (8001080 <HAL_SPI_MspInit+0xb8>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d145      	bne.n	8001076 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b25      	ldr	r3, [pc, #148]	; (8001084 <HAL_SPI_MspInit+0xbc>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	4a24      	ldr	r2, [pc, #144]	; (8001084 <HAL_SPI_MspInit+0xbc>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffa:	4b22      	ldr	r3, [pc, #136]	; (8001084 <HAL_SPI_MspInit+0xbc>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <HAL_SPI_MspInit+0xbc>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a1d      	ldr	r2, [pc, #116]	; (8001084 <HAL_SPI_MspInit+0xbc>)
 8001010:	f043 0302 	orr.w	r3, r3, #2
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <HAL_SPI_MspInit+0xbc>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001022:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001034:	2305      	movs	r3, #5
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	4812      	ldr	r0, [pc, #72]	; (8001088 <HAL_SPI_MspInit+0xc0>)
 8001040:	f000 fa5e 	bl	8001500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001044:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104e:	2301      	movs	r3, #1
 8001050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001056:	2305      	movs	r3, #5
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	4809      	ldr	r0, [pc, #36]	; (8001088 <HAL_SPI_MspInit+0xc0>)
 8001062:	f000 fa4d 	bl	8001500 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2024      	movs	r0, #36	; 0x24
 800106c:	f000 f9ef 	bl	800144e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001070:	2024      	movs	r0, #36	; 0x24
 8001072:	f000 fa08 	bl	8001486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001076:	bf00      	nop
 8001078:	3728      	adds	r7, #40	; 0x28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40003800 	.word	0x40003800
 8001084:	40023800 	.word	0x40023800
 8001088:	40020400 	.word	0x40020400

0800108c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <NMI_Handler+0x4>

08001092 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001096:	e7fe      	b.n	8001096 <HardFault_Handler+0x4>

08001098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800109c:	e7fe      	b.n	800109c <MemManage_Handler+0x4>

0800109e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <BusFault_Handler+0x4>

080010a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <UsageFault_Handler+0x4>

080010aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d8:	f000 f89a 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}

080010e0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <SPI2_IRQHandler+0x10>)
 80010e6:	f001 faad 	bl	8002644 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000028 	.word	0x20000028

080010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <SystemInit+0x20>)
 80010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <SystemInit+0x20>)
 8001100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001118:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001150 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800111e:	490e      	ldr	r1, [pc, #56]	; (8001158 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001120:	4a0e      	ldr	r2, [pc, #56]	; (800115c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001124:	e002      	b.n	800112c <LoopCopyDataInit>

08001126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112a:	3304      	adds	r3, #4

0800112c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800112c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001130:	d3f9      	bcc.n	8001126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001132:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001134:	4c0b      	ldr	r4, [pc, #44]	; (8001164 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001138:	e001      	b.n	800113e <LoopFillZerobss>

0800113a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800113c:	3204      	adds	r2, #4

0800113e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001140:	d3fb      	bcc.n	800113a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001142:	f7ff ffd7 	bl	80010f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001146:	f001 fc65 	bl	8002a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800114a:	f7ff f9e5 	bl	8000518 <main>
  bx  lr    
 800114e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001150:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001158:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800115c:	08004008 	.word	0x08004008
  ldr r2, =_sbss
 8001160:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001164:	20000084 	.word	0x20000084

08001168 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC_IRQHandler>
	...

0800116c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <HAL_Init+0x40>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0d      	ldr	r2, [pc, #52]	; (80011ac <HAL_Init+0x40>)
 8001176:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800117a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_Init+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <HAL_Init+0x40>)
 8001182:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001186:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <HAL_Init+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a07      	ldr	r2, [pc, #28]	; (80011ac <HAL_Init+0x40>)
 800118e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001192:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001194:	2003      	movs	r0, #3
 8001196:	f000 f94f 	bl	8001438 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800119a:	2000      	movs	r0, #0
 800119c:	f000 f808 	bl	80011b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a0:	f7ff feea 	bl	8000f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40023c00 	.word	0x40023c00

080011b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_InitTick+0x54>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_InitTick+0x58>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f967 	bl	80014a2 <HAL_SYSTICK_Config>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e00e      	b.n	80011fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b0f      	cmp	r3, #15
 80011e2:	d80a      	bhi.n	80011fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e4:	2200      	movs	r2, #0
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f000 f92f 	bl	800144e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f0:	4a06      	ldr	r2, [pc, #24]	; (800120c <HAL_InitTick+0x5c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e000      	b.n	80011fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000000 	.word	0x20000000
 8001208:	20000008 	.word	0x20000008
 800120c:	20000004 	.word	0x20000004

08001210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	; (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000008 	.word	0x20000008
 8001234:	20000080 	.word	0x20000080

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000080 	.word	0x20000080

08001250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001258:	f7ff ffee 	bl	8001238 <HAL_GetTick>
 800125c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001268:	d005      	beq.n	8001276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_Delay+0x44>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001276:	bf00      	nop
 8001278:	f7ff ffde 	bl	8001238 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	429a      	cmp	r2, r3
 8001286:	d8f7      	bhi.n	8001278 <HAL_Delay+0x28>
  {
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000008 	.word	0x20000008

08001298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b4:	4013      	ands	r3, r2
 80012b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ca:	4a04      	ldr	r2, [pc, #16]	; (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	60d3      	str	r3, [r2, #12]
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <__NVIC_GetPriorityGrouping+0x18>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	f003 0307 	and.w	r3, r3, #7
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	2b00      	cmp	r3, #0
 800130c:	db0b      	blt.n	8001326 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	f003 021f 	and.w	r2, r3, #31
 8001314:	4907      	ldr	r1, [pc, #28]	; (8001334 <__NVIC_EnableIRQ+0x38>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	095b      	lsrs	r3, r3, #5
 800131c:	2001      	movs	r0, #1
 800131e:	fa00 f202 	lsl.w	r2, r0, r2
 8001322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000e100 	.word	0xe000e100

08001338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	2b00      	cmp	r3, #0
 800134a:	db0a      	blt.n	8001362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	490c      	ldr	r1, [pc, #48]	; (8001384 <__NVIC_SetPriority+0x4c>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	0112      	lsls	r2, r2, #4
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	440b      	add	r3, r1
 800135c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001360:	e00a      	b.n	8001378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4908      	ldr	r1, [pc, #32]	; (8001388 <__NVIC_SetPriority+0x50>)
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	3b04      	subs	r3, #4
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	440b      	add	r3, r1
 8001376:	761a      	strb	r2, [r3, #24]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000e100 	.word	0xe000e100
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f1c3 0307 	rsb	r3, r3, #7
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	bf28      	it	cs
 80013aa:	2304      	movcs	r3, #4
 80013ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3304      	adds	r3, #4
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	d902      	bls.n	80013bc <NVIC_EncodePriority+0x30>
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3b03      	subs	r3, #3
 80013ba:	e000      	b.n	80013be <NVIC_EncodePriority+0x32>
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	401a      	ands	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d4:	f04f 31ff 	mov.w	r1, #4294967295
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	43d9      	mvns	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	4313      	orrs	r3, r2
         );
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3724      	adds	r7, #36	; 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001404:	d301      	bcc.n	800140a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001406:	2301      	movs	r3, #1
 8001408:	e00f      	b.n	800142a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <SysTick_Config+0x40>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001412:	210f      	movs	r1, #15
 8001414:	f04f 30ff 	mov.w	r0, #4294967295
 8001418:	f7ff ff8e 	bl	8001338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <SysTick_Config+0x40>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001422:	4b04      	ldr	r3, [pc, #16]	; (8001434 <SysTick_Config+0x40>)
 8001424:	2207      	movs	r2, #7
 8001426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	e000e010 	.word	0xe000e010

08001438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ff29 	bl	8001298 <__NVIC_SetPriorityGrouping>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001460:	f7ff ff3e 	bl	80012e0 <__NVIC_GetPriorityGrouping>
 8001464:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	6978      	ldr	r0, [r7, #20]
 800146c:	f7ff ff8e 	bl	800138c <NVIC_EncodePriority>
 8001470:	4602      	mov	r2, r0
 8001472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff5d 	bl	8001338 <__NVIC_SetPriority>
}
 800147e:	bf00      	nop
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff31 	bl	80012fc <__NVIC_EnableIRQ>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ffa2 	bl	80013f4 <SysTick_Config>
 80014b0:	4603      	mov	r3, r0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d004      	beq.n	80014d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2280      	movs	r2, #128	; 0x80
 80014d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e00c      	b.n	80014f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2205      	movs	r2, #5
 80014dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0201 	bic.w	r2, r2, #1
 80014ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	; 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
 800151a:	e165      	b.n	80017e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800151c:	2201      	movs	r2, #1
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	429a      	cmp	r2, r3
 8001536:	f040 8154 	bne.w	80017e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	2b01      	cmp	r3, #1
 8001544:	d005      	beq.n	8001552 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800154e:	2b02      	cmp	r3, #2
 8001550:	d130      	bne.n	80015b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	2203      	movs	r2, #3
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4013      	ands	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	68da      	ldr	r2, [r3, #12]
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001588:	2201      	movs	r2, #1
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	091b      	lsrs	r3, r3, #4
 800159e:	f003 0201 	and.w	r2, r3, #1
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d017      	beq.n	80015f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	2203      	movs	r2, #3
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d123      	bne.n	8001644 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	08da      	lsrs	r2, r3, #3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3208      	adds	r2, #8
 8001604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	220f      	movs	r2, #15
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	691a      	ldr	r2, [r3, #16]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	08da      	lsrs	r2, r3, #3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3208      	adds	r2, #8
 800163e:	69b9      	ldr	r1, [r7, #24]
 8001640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	2203      	movs	r2, #3
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0203 	and.w	r2, r3, #3
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 80ae 	beq.w	80017e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b5d      	ldr	r3, [pc, #372]	; (8001800 <HAL_GPIO_Init+0x300>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	4a5c      	ldr	r2, [pc, #368]	; (8001800 <HAL_GPIO_Init+0x300>)
 8001690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001694:	6453      	str	r3, [r2, #68]	; 0x44
 8001696:	4b5a      	ldr	r3, [pc, #360]	; (8001800 <HAL_GPIO_Init+0x300>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016a2:	4a58      	ldr	r2, [pc, #352]	; (8001804 <HAL_GPIO_Init+0x304>)
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	089b      	lsrs	r3, r3, #2
 80016a8:	3302      	adds	r3, #2
 80016aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	220f      	movs	r2, #15
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4f      	ldr	r2, [pc, #316]	; (8001808 <HAL_GPIO_Init+0x308>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d025      	beq.n	800171a <HAL_GPIO_Init+0x21a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4e      	ldr	r2, [pc, #312]	; (800180c <HAL_GPIO_Init+0x30c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d01f      	beq.n	8001716 <HAL_GPIO_Init+0x216>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4d      	ldr	r2, [pc, #308]	; (8001810 <HAL_GPIO_Init+0x310>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d019      	beq.n	8001712 <HAL_GPIO_Init+0x212>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4c      	ldr	r2, [pc, #304]	; (8001814 <HAL_GPIO_Init+0x314>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d013      	beq.n	800170e <HAL_GPIO_Init+0x20e>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a4b      	ldr	r2, [pc, #300]	; (8001818 <HAL_GPIO_Init+0x318>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d00d      	beq.n	800170a <HAL_GPIO_Init+0x20a>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a4a      	ldr	r2, [pc, #296]	; (800181c <HAL_GPIO_Init+0x31c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d007      	beq.n	8001706 <HAL_GPIO_Init+0x206>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a49      	ldr	r2, [pc, #292]	; (8001820 <HAL_GPIO_Init+0x320>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d101      	bne.n	8001702 <HAL_GPIO_Init+0x202>
 80016fe:	2306      	movs	r3, #6
 8001700:	e00c      	b.n	800171c <HAL_GPIO_Init+0x21c>
 8001702:	2307      	movs	r3, #7
 8001704:	e00a      	b.n	800171c <HAL_GPIO_Init+0x21c>
 8001706:	2305      	movs	r3, #5
 8001708:	e008      	b.n	800171c <HAL_GPIO_Init+0x21c>
 800170a:	2304      	movs	r3, #4
 800170c:	e006      	b.n	800171c <HAL_GPIO_Init+0x21c>
 800170e:	2303      	movs	r3, #3
 8001710:	e004      	b.n	800171c <HAL_GPIO_Init+0x21c>
 8001712:	2302      	movs	r3, #2
 8001714:	e002      	b.n	800171c <HAL_GPIO_Init+0x21c>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <HAL_GPIO_Init+0x21c>
 800171a:	2300      	movs	r3, #0
 800171c:	69fa      	ldr	r2, [r7, #28]
 800171e:	f002 0203 	and.w	r2, r2, #3
 8001722:	0092      	lsls	r2, r2, #2
 8001724:	4093      	lsls	r3, r2
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800172c:	4935      	ldr	r1, [pc, #212]	; (8001804 <HAL_GPIO_Init+0x304>)
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	089b      	lsrs	r3, r3, #2
 8001732:	3302      	adds	r3, #2
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800173a:	4b3a      	ldr	r3, [pc, #232]	; (8001824 <HAL_GPIO_Init+0x324>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800175e:	4a31      	ldr	r2, [pc, #196]	; (8001824 <HAL_GPIO_Init+0x324>)
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001764:	4b2f      	ldr	r3, [pc, #188]	; (8001824 <HAL_GPIO_Init+0x324>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001788:	4a26      	ldr	r2, [pc, #152]	; (8001824 <HAL_GPIO_Init+0x324>)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800178e:	4b25      	ldr	r3, [pc, #148]	; (8001824 <HAL_GPIO_Init+0x324>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	43db      	mvns	r3, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017b2:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <HAL_GPIO_Init+0x324>)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b8:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <HAL_GPIO_Init+0x324>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017dc:	4a11      	ldr	r2, [pc, #68]	; (8001824 <HAL_GPIO_Init+0x324>)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3301      	adds	r3, #1
 80017e6:	61fb      	str	r3, [r7, #28]
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	2b0f      	cmp	r3, #15
 80017ec:	f67f ae96 	bls.w	800151c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	3724      	adds	r7, #36	; 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800
 8001804:	40013800 	.word	0x40013800
 8001808:	40020000 	.word	0x40020000
 800180c:	40020400 	.word	0x40020400
 8001810:	40020800 	.word	0x40020800
 8001814:	40020c00 	.word	0x40020c00
 8001818:	40021000 	.word	0x40021000
 800181c:	40021400 	.word	0x40021400
 8001820:	40021800 	.word	0x40021800
 8001824:	40013c00 	.word	0x40013c00

08001828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	807b      	strh	r3, [r7, #2]
 8001834:	4613      	mov	r3, r2
 8001836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001838:	787b      	ldrb	r3, [r7, #1]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800183e:	887a      	ldrh	r2, [r7, #2]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001844:	e003      	b.n	800184e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001846:	887b      	ldrh	r3, [r7, #2]
 8001848:	041a      	lsls	r2, r3, #16
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	619a      	str	r2, [r3, #24]
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0cc      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001870:	4b68      	ldr	r3, [pc, #416]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 030f 	and.w	r3, r3, #15
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d90c      	bls.n	8001898 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187e:	4b65      	ldr	r3, [pc, #404]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001886:	4b63      	ldr	r3, [pc, #396]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0b8      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d020      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b0:	4b59      	ldr	r3, [pc, #356]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	4a58      	ldr	r2, [pc, #352]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018c8:	4b53      	ldr	r3, [pc, #332]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	4a52      	ldr	r2, [pc, #328]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d4:	4b50      	ldr	r3, [pc, #320]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	494d      	ldr	r1, [pc, #308]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d044      	beq.n	800197c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d107      	bne.n	800190a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	4b47      	ldr	r3, [pc, #284]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d119      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e07f      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d003      	beq.n	800191a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001916:	2b03      	cmp	r3, #3
 8001918:	d107      	bne.n	800192a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191a:	4b3f      	ldr	r3, [pc, #252]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d109      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e06f      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192a:	4b3b      	ldr	r3, [pc, #236]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e067      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800193a:	4b37      	ldr	r3, [pc, #220]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f023 0203 	bic.w	r2, r3, #3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	4934      	ldr	r1, [pc, #208]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 8001948:	4313      	orrs	r3, r2
 800194a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800194c:	f7ff fc74 	bl	8001238 <HAL_GetTick>
 8001950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001952:	e00a      	b.n	800196a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001954:	f7ff fc70 	bl	8001238 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e04f      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196a:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 020c 	and.w	r2, r3, #12
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	429a      	cmp	r2, r3
 800197a:	d1eb      	bne.n	8001954 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800197c:	4b25      	ldr	r3, [pc, #148]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 030f 	and.w	r3, r3, #15
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d20c      	bcs.n	80019a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198a:	4b22      	ldr	r3, [pc, #136]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001992:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e032      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d008      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b0:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4916      	ldr	r1, [pc, #88]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d009      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	490e      	ldr	r1, [pc, #56]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019e2:	f000 f821 	bl	8001a28 <HAL_RCC_GetSysClockFreq>
 80019e6:	4602      	mov	r2, r0
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	490a      	ldr	r1, [pc, #40]	; (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 80019f4:	5ccb      	ldrb	r3, [r1, r3]
 80019f6:	fa22 f303 	lsr.w	r3, r2, r3
 80019fa:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fbd4 	bl	80011b0 <HAL_InitTick>

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023c00 	.word	0x40023c00
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	08003fe8 	.word	0x08003fe8
 8001a20:	20000000 	.word	0x20000000
 8001a24:	20000004 	.word	0x20000004

08001a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a2c:	b0a6      	sub	sp, #152	; 0x98
 8001a2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a4e:	4bc8      	ldr	r3, [pc, #800]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b0c      	cmp	r3, #12
 8001a58:	f200 817e 	bhi.w	8001d58 <HAL_RCC_GetSysClockFreq+0x330>
 8001a5c:	a201      	add	r2, pc, #4	; (adr r2, 8001a64 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a62:	bf00      	nop
 8001a64:	08001a99 	.word	0x08001a99
 8001a68:	08001d59 	.word	0x08001d59
 8001a6c:	08001d59 	.word	0x08001d59
 8001a70:	08001d59 	.word	0x08001d59
 8001a74:	08001aa1 	.word	0x08001aa1
 8001a78:	08001d59 	.word	0x08001d59
 8001a7c:	08001d59 	.word	0x08001d59
 8001a80:	08001d59 	.word	0x08001d59
 8001a84:	08001aa9 	.word	0x08001aa9
 8001a88:	08001d59 	.word	0x08001d59
 8001a8c:	08001d59 	.word	0x08001d59
 8001a90:	08001d59 	.word	0x08001d59
 8001a94:	08001c13 	.word	0x08001c13
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a98:	4bb6      	ldr	r3, [pc, #728]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001a9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001a9e:	e15f      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aa0:	4bb5      	ldr	r3, [pc, #724]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x350>)
 8001aa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001aa6:	e15b      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aa8:	4bb1      	ldr	r3, [pc, #708]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x348>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ab0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ab4:	4bae      	ldr	r3, [pc, #696]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d031      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac0:	4bab      	ldr	r3, [pc, #684]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	099b      	lsrs	r3, r3, #6
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	66bb      	str	r3, [r7, #104]	; 0x68
 8001aca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001acc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ad2:	663b      	str	r3, [r7, #96]	; 0x60
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	667b      	str	r3, [r7, #100]	; 0x64
 8001ad8:	4ba7      	ldr	r3, [pc, #668]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x350>)
 8001ada:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001ade:	462a      	mov	r2, r5
 8001ae0:	fb03 f202 	mul.w	r2, r3, r2
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	4621      	mov	r1, r4
 8001ae8:	fb01 f303 	mul.w	r3, r1, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	4aa2      	ldr	r2, [pc, #648]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x350>)
 8001af0:	4621      	mov	r1, r4
 8001af2:	fba1 1202 	umull	r1, r2, r1, r2
 8001af6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001af8:	460a      	mov	r2, r1
 8001afa:	67ba      	str	r2, [r7, #120]	; 0x78
 8001afc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001afe:	4413      	add	r3, r2
 8001b00:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b06:	2200      	movs	r2, #0
 8001b08:	65bb      	str	r3, [r7, #88]	; 0x58
 8001b0a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001b0c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b10:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001b14:	f7fe fb7e 	bl	8000214 <__aeabi_uldivmod>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001b22:	e064      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b24:	4b92      	ldr	r3, [pc, #584]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	099b      	lsrs	r3, r3, #6
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	653b      	str	r3, [r7, #80]	; 0x50
 8001b2e:	657a      	str	r2, [r7, #84]	; 0x54
 8001b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b36:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b38:	2300      	movs	r3, #0
 8001b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b3c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001b40:	4622      	mov	r2, r4
 8001b42:	462b      	mov	r3, r5
 8001b44:	f04f 0000 	mov.w	r0, #0
 8001b48:	f04f 0100 	mov.w	r1, #0
 8001b4c:	0159      	lsls	r1, r3, #5
 8001b4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b52:	0150      	lsls	r0, r2, #5
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4621      	mov	r1, r4
 8001b5a:	1a51      	subs	r1, r2, r1
 8001b5c:	6139      	str	r1, [r7, #16]
 8001b5e:	4629      	mov	r1, r5
 8001b60:	eb63 0301 	sbc.w	r3, r3, r1
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b72:	4659      	mov	r1, fp
 8001b74:	018b      	lsls	r3, r1, #6
 8001b76:	4651      	mov	r1, sl
 8001b78:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b7c:	4651      	mov	r1, sl
 8001b7e:	018a      	lsls	r2, r1, #6
 8001b80:	4651      	mov	r1, sl
 8001b82:	ebb2 0801 	subs.w	r8, r2, r1
 8001b86:	4659      	mov	r1, fp
 8001b88:	eb63 0901 	sbc.w	r9, r3, r1
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b98:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b9c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ba0:	4690      	mov	r8, r2
 8001ba2:	4699      	mov	r9, r3
 8001ba4:	4623      	mov	r3, r4
 8001ba6:	eb18 0303 	adds.w	r3, r8, r3
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	462b      	mov	r3, r5
 8001bae:	eb49 0303 	adc.w	r3, r9, r3
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bc0:	4629      	mov	r1, r5
 8001bc2:	028b      	lsls	r3, r1, #10
 8001bc4:	4621      	mov	r1, r4
 8001bc6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bca:	4621      	mov	r1, r4
 8001bcc:	028a      	lsls	r2, r1, #10
 8001bce:	4610      	mov	r0, r2
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	643b      	str	r3, [r7, #64]	; 0x40
 8001bda:	647a      	str	r2, [r7, #68]	; 0x44
 8001bdc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001be0:	f7fe fb18 	bl	8000214 <__aeabi_uldivmod>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4613      	mov	r3, r2
 8001bea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bee:	4b60      	ldr	r3, [pc, #384]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x348>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	0c1b      	lsrs	r3, r3, #16
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001c00:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001c10:	e0a6      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c12:	4b57      	ldr	r3, [pc, #348]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c1e:	4b54      	ldr	r3, [pc, #336]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d02a      	beq.n	8001c80 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c2a:	4b51      	ldr	r3, [pc, #324]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	099b      	lsrs	r3, r3, #6
 8001c30:	2200      	movs	r2, #0
 8001c32:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4b4e      	ldr	r3, [pc, #312]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x350>)
 8001c40:	fb03 f201 	mul.w	r2, r3, r1
 8001c44:	2300      	movs	r3, #0
 8001c46:	fb00 f303 	mul.w	r3, r0, r3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a4a      	ldr	r2, [pc, #296]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x350>)
 8001c4e:	fba0 1202 	umull	r1, r2, r0, r2
 8001c52:	677a      	str	r2, [r7, #116]	; 0x74
 8001c54:	460a      	mov	r2, r1
 8001c56:	673a      	str	r2, [r7, #112]	; 0x70
 8001c58:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001c5a:	4413      	add	r3, r2
 8001c5c:	677b      	str	r3, [r7, #116]	; 0x74
 8001c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c62:	2200      	movs	r2, #0
 8001c64:	633b      	str	r3, [r7, #48]	; 0x30
 8001c66:	637a      	str	r2, [r7, #52]	; 0x34
 8001c68:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c6c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001c70:	f7fe fad0 	bl	8000214 <__aeabi_uldivmod>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4613      	mov	r3, r2
 8001c7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001c7e:	e05b      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c80:	4b3b      	ldr	r3, [pc, #236]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	099b      	lsrs	r3, r3, #6
 8001c86:	2200      	movs	r2, #0
 8001c88:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c92:	623b      	str	r3, [r7, #32]
 8001c94:	2300      	movs	r3, #0
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
 8001c98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c9c:	4642      	mov	r2, r8
 8001c9e:	464b      	mov	r3, r9
 8001ca0:	f04f 0000 	mov.w	r0, #0
 8001ca4:	f04f 0100 	mov.w	r1, #0
 8001ca8:	0159      	lsls	r1, r3, #5
 8001caa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cae:	0150      	lsls	r0, r2, #5
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4641      	mov	r1, r8
 8001cb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cba:	4649      	mov	r1, r9
 8001cbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ccc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cd4:	ebb2 040a 	subs.w	r4, r2, sl
 8001cd8:	eb63 050b 	sbc.w	r5, r3, fp
 8001cdc:	f04f 0200 	mov.w	r2, #0
 8001ce0:	f04f 0300 	mov.w	r3, #0
 8001ce4:	00eb      	lsls	r3, r5, #3
 8001ce6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cea:	00e2      	lsls	r2, r4, #3
 8001cec:	4614      	mov	r4, r2
 8001cee:	461d      	mov	r5, r3
 8001cf0:	4643      	mov	r3, r8
 8001cf2:	18e3      	adds	r3, r4, r3
 8001cf4:	603b      	str	r3, [r7, #0]
 8001cf6:	464b      	mov	r3, r9
 8001cf8:	eb45 0303 	adc.w	r3, r5, r3
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d0a:	4629      	mov	r1, r5
 8001d0c:	028b      	lsls	r3, r1, #10
 8001d0e:	4621      	mov	r1, r4
 8001d10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d14:	4621      	mov	r1, r4
 8001d16:	028a      	lsls	r2, r1, #10
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d20:	2200      	movs	r2, #0
 8001d22:	61bb      	str	r3, [r7, #24]
 8001d24:	61fa      	str	r2, [r7, #28]
 8001d26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d2a:	f7fe fa73 	bl	8000214 <__aeabi_uldivmod>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4613      	mov	r3, r2
 8001d34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d38:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	0f1b      	lsrs	r3, r3, #28
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001d46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001d4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001d56:	e003      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001d5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001d5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3798      	adds	r7, #152	; 0x98
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	00f42400 	.word	0x00f42400
 8001d78:	017d7840 	.word	0x017d7840

08001d7c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e28d      	b.n	80022aa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 8083 	beq.w	8001ea2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d9c:	4b94      	ldr	r3, [pc, #592]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d019      	beq.n	8001ddc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001da8:	4b91      	ldr	r3, [pc, #580]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d106      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001db4:	4b8e      	ldr	r3, [pc, #568]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dc0:	d00c      	beq.n	8001ddc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dc2:	4b8b      	ldr	r3, [pc, #556]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001dca:	2b0c      	cmp	r3, #12
 8001dcc:	d112      	bne.n	8001df4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dce:	4b88      	ldr	r3, [pc, #544]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dda:	d10b      	bne.n	8001df4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ddc:	4b84      	ldr	r3, [pc, #528]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d05b      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x124>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d157      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e25a      	b.n	80022aa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dfc:	d106      	bne.n	8001e0c <HAL_RCC_OscConfig+0x90>
 8001dfe:	4b7c      	ldr	r3, [pc, #496]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a7b      	ldr	r2, [pc, #492]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	e01d      	b.n	8001e48 <HAL_RCC_OscConfig+0xcc>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e14:	d10c      	bne.n	8001e30 <HAL_RCC_OscConfig+0xb4>
 8001e16:	4b76      	ldr	r3, [pc, #472]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a75      	ldr	r2, [pc, #468]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	4b73      	ldr	r3, [pc, #460]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a72      	ldr	r2, [pc, #456]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	e00b      	b.n	8001e48 <HAL_RCC_OscConfig+0xcc>
 8001e30:	4b6f      	ldr	r3, [pc, #444]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a6e      	ldr	r2, [pc, #440]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	4b6c      	ldr	r3, [pc, #432]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a6b      	ldr	r2, [pc, #428]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d013      	beq.n	8001e78 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e50:	f7ff f9f2 	bl	8001238 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e58:	f7ff f9ee 	bl	8001238 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b64      	cmp	r3, #100	; 0x64
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e21f      	b.n	80022aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6a:	4b61      	ldr	r3, [pc, #388]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCC_OscConfig+0xdc>
 8001e76:	e014      	b.n	8001ea2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e78:	f7ff f9de 	bl	8001238 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e80:	f7ff f9da 	bl	8001238 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b64      	cmp	r3, #100	; 0x64
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e20b      	b.n	80022aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e92:	4b57      	ldr	r3, [pc, #348]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x104>
 8001e9e:	e000      	b.n	8001ea2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d06f      	beq.n	8001f8e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001eae:	4b50      	ldr	r3, [pc, #320]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d017      	beq.n	8001eea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001eba:	4b4d      	ldr	r3, [pc, #308]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ec2:	2b08      	cmp	r3, #8
 8001ec4:	d105      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ec6:	4b4a      	ldr	r3, [pc, #296]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00b      	beq.n	8001eea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ed2:	4b47      	ldr	r3, [pc, #284]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001eda:	2b0c      	cmp	r3, #12
 8001edc:	d11c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ede:	4b44      	ldr	r3, [pc, #272]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d116      	bne.n	8001f18 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eea:	4b41      	ldr	r3, [pc, #260]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d005      	beq.n	8001f02 <HAL_RCC_OscConfig+0x186>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d001      	beq.n	8001f02 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e1d3      	b.n	80022aa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f02:	4b3b      	ldr	r3, [pc, #236]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4937      	ldr	r1, [pc, #220]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f16:	e03a      	b.n	8001f8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d020      	beq.n	8001f62 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f20:	4b34      	ldr	r3, [pc, #208]	; (8001ff4 <HAL_RCC_OscConfig+0x278>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f26:	f7ff f987 	bl	8001238 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f2e:	f7ff f983 	bl	8001238 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e1b4      	b.n	80022aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f40:	4b2b      	ldr	r3, [pc, #172]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4c:	4b28      	ldr	r3, [pc, #160]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4925      	ldr	r1, [pc, #148]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	600b      	str	r3, [r1, #0]
 8001f60:	e015      	b.n	8001f8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f62:	4b24      	ldr	r3, [pc, #144]	; (8001ff4 <HAL_RCC_OscConfig+0x278>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f68:	f7ff f966 	bl	8001238 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f70:	f7ff f962 	bl	8001238 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e193      	b.n	80022aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f82:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d036      	beq.n	8002008 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d016      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <HAL_RCC_OscConfig+0x27c>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa8:	f7ff f946 	bl	8001238 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fb0:	f7ff f942 	bl	8001238 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e173      	b.n	80022aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x234>
 8001fce:	e01b      	b.n	8002008 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd0:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <HAL_RCC_OscConfig+0x27c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd6:	f7ff f92f 	bl	8001238 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fdc:	e00e      	b.n	8001ffc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fde:	f7ff f92b 	bl	8001238 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d907      	bls.n	8001ffc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e15c      	b.n	80022aa <HAL_RCC_OscConfig+0x52e>
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	42470000 	.word	0x42470000
 8001ff8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ffc:	4b8a      	ldr	r3, [pc, #552]	; (8002228 <HAL_RCC_OscConfig+0x4ac>)
 8001ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1ea      	bne.n	8001fde <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 8097 	beq.w	8002144 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002016:	2300      	movs	r3, #0
 8002018:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800201a:	4b83      	ldr	r3, [pc, #524]	; (8002228 <HAL_RCC_OscConfig+0x4ac>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10f      	bne.n	8002046 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	4b7f      	ldr	r3, [pc, #508]	; (8002228 <HAL_RCC_OscConfig+0x4ac>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	4a7e      	ldr	r2, [pc, #504]	; (8002228 <HAL_RCC_OscConfig+0x4ac>)
 8002030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002034:	6413      	str	r3, [r2, #64]	; 0x40
 8002036:	4b7c      	ldr	r3, [pc, #496]	; (8002228 <HAL_RCC_OscConfig+0x4ac>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002042:	2301      	movs	r3, #1
 8002044:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002046:	4b79      	ldr	r3, [pc, #484]	; (800222c <HAL_RCC_OscConfig+0x4b0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204e:	2b00      	cmp	r3, #0
 8002050:	d118      	bne.n	8002084 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002052:	4b76      	ldr	r3, [pc, #472]	; (800222c <HAL_RCC_OscConfig+0x4b0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a75      	ldr	r2, [pc, #468]	; (800222c <HAL_RCC_OscConfig+0x4b0>)
 8002058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800205e:	f7ff f8eb 	bl	8001238 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002066:	f7ff f8e7 	bl	8001238 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e118      	b.n	80022aa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002078:	4b6c      	ldr	r3, [pc, #432]	; (800222c <HAL_RCC_OscConfig+0x4b0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0f0      	beq.n	8002066 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d106      	bne.n	800209a <HAL_RCC_OscConfig+0x31e>
 800208c:	4b66      	ldr	r3, [pc, #408]	; (8002228 <HAL_RCC_OscConfig+0x4ac>)
 800208e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002090:	4a65      	ldr	r2, [pc, #404]	; (8002228 <HAL_RCC_OscConfig+0x4ac>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	6713      	str	r3, [r2, #112]	; 0x70
 8002098:	e01c      	b.n	80020d4 <HAL_RCC_OscConfig+0x358>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	2b05      	cmp	r3, #5
 80020a0:	d10c      	bne.n	80020bc <HAL_RCC_OscConfig+0x340>
 80020a2:	4b61      	ldr	r3, [pc, #388]	; (8002228 <HAL_RCC_OscConfig+0x4ac>)
 80020a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a6:	4a60      	ldr	r2, [pc, #384]	; (8002228 <HAL_RCC_OscConfig+0x4ac>)
 80020a8:	f043 0304 	orr.w	r3, r3, #4
 80020ac:	6713      	str	r3, [r2, #112]	; 0x70
 80020ae:	4b5e      	ldr	r3, [pc, #376]	; (8002228 <HAL_RCC_OscConfig+0x4ac>)
 80020b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b2:	4a5d      	ldr	r2, [pc, #372]	; (8002228 <HAL_RCC_OscConfig+0x4ac>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ba:	e00b      	b.n	80020d4 <HAL_RCC_OscConfig+0x358>
 80020bc:	4b5a      	ldr	r3, [pc, #360]	; (8002228 <HAL_RCC_OscConfig+0x4ac>)
 80020be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c0:	4a59      	ldr	r2, [pc, #356]	; (8002228 <HAL_RCC_OscConfig+0x4ac>)
 80020c2:	f023 0301 	bic.w	r3, r3, #1
 80020c6:	6713      	str	r3, [r2, #112]	; 0x70
 80020c8:	4b57      	ldr	r3, [pc, #348]	; (8002228 <HAL_RCC_OscConfig+0x4ac>)
 80020ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020cc:	4a56      	ldr	r2, [pc, #344]	; (8002228 <HAL_RCC_OscConfig+0x4ac>)
 80020ce:	f023 0304 	bic.w	r3, r3, #4
 80020d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d015      	beq.n	8002108 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020dc:	f7ff f8ac 	bl	8001238 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e2:	e00a      	b.n	80020fa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e4:	f7ff f8a8 	bl	8001238 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e0d7      	b.n	80022aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020fa:	4b4b      	ldr	r3, [pc, #300]	; (8002228 <HAL_RCC_OscConfig+0x4ac>)
 80020fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0ee      	beq.n	80020e4 <HAL_RCC_OscConfig+0x368>
 8002106:	e014      	b.n	8002132 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002108:	f7ff f896 	bl	8001238 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800210e:	e00a      	b.n	8002126 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002110:	f7ff f892 	bl	8001238 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	f241 3288 	movw	r2, #5000	; 0x1388
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e0c1      	b.n	80022aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002126:	4b40      	ldr	r3, [pc, #256]	; (8002228 <HAL_RCC_OscConfig+0x4ac>)
 8002128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1ee      	bne.n	8002110 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002132:	7dfb      	ldrb	r3, [r7, #23]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d105      	bne.n	8002144 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002138:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <HAL_RCC_OscConfig+0x4ac>)
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	4a3a      	ldr	r2, [pc, #232]	; (8002228 <HAL_RCC_OscConfig+0x4ac>)
 800213e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002142:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 80ad 	beq.w	80022a8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800214e:	4b36      	ldr	r3, [pc, #216]	; (8002228 <HAL_RCC_OscConfig+0x4ac>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b08      	cmp	r3, #8
 8002158:	d060      	beq.n	800221c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d145      	bne.n	80021ee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002162:	4b33      	ldr	r3, [pc, #204]	; (8002230 <HAL_RCC_OscConfig+0x4b4>)
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002168:	f7ff f866 	bl	8001238 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002170:	f7ff f862 	bl	8001238 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e093      	b.n	80022aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002182:	4b29      	ldr	r3, [pc, #164]	; (8002228 <HAL_RCC_OscConfig+0x4ac>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69da      	ldr	r2, [r3, #28]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	019b      	lsls	r3, r3, #6
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a4:	085b      	lsrs	r3, r3, #1
 80021a6:	3b01      	subs	r3, #1
 80021a8:	041b      	lsls	r3, r3, #16
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b0:	061b      	lsls	r3, r3, #24
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	071b      	lsls	r3, r3, #28
 80021ba:	491b      	ldr	r1, [pc, #108]	; (8002228 <HAL_RCC_OscConfig+0x4ac>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c0:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <HAL_RCC_OscConfig+0x4b4>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c6:	f7ff f837 	bl	8001238 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ce:	f7ff f833 	bl	8001238 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e064      	b.n	80022aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e0:	4b11      	ldr	r3, [pc, #68]	; (8002228 <HAL_RCC_OscConfig+0x4ac>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0x452>
 80021ec:	e05c      	b.n	80022a8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <HAL_RCC_OscConfig+0x4b4>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7ff f820 	bl	8001238 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021fc:	f7ff f81c 	bl	8001238 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e04d      	b.n	80022aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_RCC_OscConfig+0x4ac>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x480>
 800221a:	e045      	b.n	80022a8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d107      	bne.n	8002234 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e040      	b.n	80022aa <HAL_RCC_OscConfig+0x52e>
 8002228:	40023800 	.word	0x40023800
 800222c:	40007000 	.word	0x40007000
 8002230:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002234:	4b1f      	ldr	r3, [pc, #124]	; (80022b4 <HAL_RCC_OscConfig+0x538>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d030      	beq.n	80022a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800224c:	429a      	cmp	r2, r3
 800224e:	d129      	bne.n	80022a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800225a:	429a      	cmp	r2, r3
 800225c:	d122      	bne.n	80022a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002264:	4013      	ands	r3, r2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800226a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800226c:	4293      	cmp	r3, r2
 800226e:	d119      	bne.n	80022a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227a:	085b      	lsrs	r3, r3, #1
 800227c:	3b01      	subs	r3, #1
 800227e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002280:	429a      	cmp	r2, r3
 8002282:	d10f      	bne.n	80022a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002290:	429a      	cmp	r2, r3
 8002292:	d107      	bne.n	80022a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d001      	beq.n	80022a8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e000      	b.n	80022aa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800

080022b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e07b      	b.n	80023c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d108      	bne.n	80022e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022da:	d009      	beq.n	80022f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	61da      	str	r2, [r3, #28]
 80022e2:	e005      	b.n	80022f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d106      	bne.n	8002310 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7fe fe5c 	bl	8000fc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002326:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	431a      	orrs	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002374:	ea42 0103 	orr.w	r1, r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	0c1b      	lsrs	r3, r3, #16
 800238e:	f003 0104 	and.w	r1, r3, #4
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	f003 0210 	and.w	r2, r3, #16
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	69da      	ldr	r2, [r3, #28]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b088      	sub	sp, #32
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	603b      	str	r3, [r7, #0]
 80023d6:	4613      	mov	r3, r2
 80023d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <HAL_SPI_Transmit+0x22>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e126      	b.n	800263a <HAL_SPI_Transmit+0x270>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023f4:	f7fe ff20 	bl	8001238 <HAL_GetTick>
 80023f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80023fa:	88fb      	ldrh	r3, [r7, #6]
 80023fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b01      	cmp	r3, #1
 8002408:	d002      	beq.n	8002410 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800240a:	2302      	movs	r3, #2
 800240c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800240e:	e10b      	b.n	8002628 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <HAL_SPI_Transmit+0x52>
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d102      	bne.n	8002422 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002420:	e102      	b.n	8002628 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2203      	movs	r2, #3
 8002426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	88fa      	ldrh	r2, [r7, #6]
 800243a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	88fa      	ldrh	r2, [r7, #6]
 8002440:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002468:	d10f      	bne.n	800248a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002478:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002488:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002494:	2b40      	cmp	r3, #64	; 0x40
 8002496:	d007      	beq.n	80024a8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024b0:	d14b      	bne.n	800254a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d002      	beq.n	80024c0 <HAL_SPI_Transmit+0xf6>
 80024ba:	8afb      	ldrh	r3, [r7, #22]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d13e      	bne.n	800253e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c4:	881a      	ldrh	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	1c9a      	adds	r2, r3, #2
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024da:	b29b      	uxth	r3, r3
 80024dc:	3b01      	subs	r3, #1
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80024e4:	e02b      	b.n	800253e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d112      	bne.n	800251a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	881a      	ldrh	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	1c9a      	adds	r2, r3, #2
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800250e:	b29b      	uxth	r3, r3
 8002510:	3b01      	subs	r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	86da      	strh	r2, [r3, #54]	; 0x36
 8002518:	e011      	b.n	800253e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800251a:	f7fe fe8d 	bl	8001238 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d803      	bhi.n	8002532 <HAL_SPI_Transmit+0x168>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002530:	d102      	bne.n	8002538 <HAL_SPI_Transmit+0x16e>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d102      	bne.n	800253e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800253c:	e074      	b.n	8002628 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002542:	b29b      	uxth	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1ce      	bne.n	80024e6 <HAL_SPI_Transmit+0x11c>
 8002548:	e04c      	b.n	80025e4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_SPI_Transmit+0x18e>
 8002552:	8afb      	ldrh	r3, [r7, #22]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d140      	bne.n	80025da <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	330c      	adds	r3, #12
 8002562:	7812      	ldrb	r2, [r2, #0]
 8002564:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800257e:	e02c      	b.n	80025da <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b02      	cmp	r3, #2
 800258c:	d113      	bne.n	80025b6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	330c      	adds	r3, #12
 8002598:	7812      	ldrb	r2, [r2, #0]
 800259a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	3b01      	subs	r3, #1
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80025b4:	e011      	b.n	80025da <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025b6:	f7fe fe3f 	bl	8001238 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d803      	bhi.n	80025ce <HAL_SPI_Transmit+0x204>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d102      	bne.n	80025d4 <HAL_SPI_Transmit+0x20a>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d102      	bne.n	80025da <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80025d8:	e026      	b.n	8002628 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025de:	b29b      	uxth	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1cd      	bne.n	8002580 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	6839      	ldr	r1, [r7, #0]
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 f9d1 	bl	8002990 <SPI_EndRxTxTransaction>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2220      	movs	r2, #32
 80025f8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10a      	bne.n	8002618 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261c:	2b00      	cmp	r3, #0
 800261e:	d002      	beq.n	8002626 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	77fb      	strb	r3, [r7, #31]
 8002624:	e000      	b.n	8002628 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002626:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002638:	7ffb      	ldrb	r3, [r7, #31]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3720      	adds	r7, #32
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	099b      	lsrs	r3, r3, #6
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10f      	bne.n	8002688 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	099b      	lsrs	r3, r3, #6
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d004      	beq.n	8002688 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	4798      	blx	r3
    return;
 8002686:	e0d7      	b.n	8002838 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	085b      	lsrs	r3, r3, #1
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00a      	beq.n	80026aa <HAL_SPI_IRQHandler+0x66>
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	09db      	lsrs	r3, r3, #7
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d004      	beq.n	80026aa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	4798      	blx	r3
    return;
 80026a8:	e0c6      	b.n	8002838 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	095b      	lsrs	r3, r3, #5
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10c      	bne.n	80026d0 <HAL_SPI_IRQHandler+0x8c>
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	099b      	lsrs	r3, r3, #6
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d106      	bne.n	80026d0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 80b4 	beq.w	8002838 <HAL_SPI_IRQHandler+0x1f4>
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 80ad 	beq.w	8002838 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	099b      	lsrs	r3, r3, #6
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d023      	beq.n	8002732 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	d011      	beq.n	800271a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fa:	f043 0204 	orr.w	r2, r3, #4
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	e00b      	b.n	8002732 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800271a:	2300      	movs	r3, #0
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	693b      	ldr	r3, [r7, #16]
        return;
 8002730:	e082      	b.n	8002838 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d014      	beq.n	8002768 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002742:	f043 0201 	orr.w	r2, r3, #1
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	0a1b      	lsrs	r3, r3, #8
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00c      	beq.n	800278e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002778:	f043 0208 	orr.w	r2, r3, #8
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002780:	2300      	movs	r3, #0
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002792:	2b00      	cmp	r3, #0
 8002794:	d04f      	beq.n	8002836 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80027a4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d104      	bne.n	80027c2 <HAL_SPI_IRQHandler+0x17e>
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d034      	beq.n	800282c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0203 	bic.w	r2, r2, #3
 80027d0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d011      	beq.n	80027fe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027de:	4a18      	ldr	r2, [pc, #96]	; (8002840 <HAL_SPI_IRQHandler+0x1fc>)
 80027e0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe fe67 	bl	80014ba <HAL_DMA_Abort_IT>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d005      	beq.n	80027fe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002802:	2b00      	cmp	r3, #0
 8002804:	d016      	beq.n	8002834 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800280a:	4a0d      	ldr	r2, [pc, #52]	; (8002840 <HAL_SPI_IRQHandler+0x1fc>)
 800280c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe fe51 	bl	80014ba <HAL_DMA_Abort_IT>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00a      	beq.n	8002834 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002822:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800282a:	e003      	b.n	8002834 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f809 	bl	8002844 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002832:	e000      	b.n	8002836 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002834:	bf00      	nop
    return;
 8002836:	bf00      	nop
  }
}
 8002838:	3720      	adds	r7, #32
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	08002859 	.word	0x08002859

08002844 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002864:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f7ff ffe6 	bl	8002844 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002878:	bf00      	nop
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	4613      	mov	r3, r2
 800288e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002890:	f7fe fcd2 	bl	8001238 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002898:	1a9b      	subs	r3, r3, r2
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	4413      	add	r3, r2
 800289e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028a0:	f7fe fcca 	bl	8001238 <HAL_GetTick>
 80028a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028a6:	4b39      	ldr	r3, [pc, #228]	; (800298c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	015b      	lsls	r3, r3, #5
 80028ac:	0d1b      	lsrs	r3, r3, #20
 80028ae:	69fa      	ldr	r2, [r7, #28]
 80028b0:	fb02 f303 	mul.w	r3, r2, r3
 80028b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028b6:	e054      	b.n	8002962 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028be:	d050      	beq.n	8002962 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028c0:	f7fe fcba 	bl	8001238 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d902      	bls.n	80028d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d13d      	bne.n	8002952 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028ee:	d111      	bne.n	8002914 <SPI_WaitFlagStateUntilTimeout+0x94>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028f8:	d004      	beq.n	8002904 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002902:	d107      	bne.n	8002914 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002912:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800291c:	d10f      	bne.n	800293e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800293c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e017      	b.n	8002982 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	3b01      	subs	r3, #1
 8002960:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4013      	ands	r3, r2
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	429a      	cmp	r2, r3
 8002970:	bf0c      	ite	eq
 8002972:	2301      	moveq	r3, #1
 8002974:	2300      	movne	r3, #0
 8002976:	b2db      	uxtb	r3, r3
 8002978:	461a      	mov	r2, r3
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	429a      	cmp	r2, r3
 800297e:	d19b      	bne.n	80028b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3720      	adds	r7, #32
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000000 	.word	0x20000000

08002990 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af02      	add	r7, sp, #8
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800299c:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <SPI_EndRxTxTransaction+0x7c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a1b      	ldr	r2, [pc, #108]	; (8002a10 <SPI_EndRxTxTransaction+0x80>)
 80029a2:	fba2 2303 	umull	r2, r3, r2, r3
 80029a6:	0d5b      	lsrs	r3, r3, #21
 80029a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029ac:	fb02 f303 	mul.w	r3, r2, r3
 80029b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029ba:	d112      	bne.n	80029e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2200      	movs	r2, #0
 80029c4:	2180      	movs	r1, #128	; 0x80
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f7ff ff5a 	bl	8002880 <SPI_WaitFlagStateUntilTimeout>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d016      	beq.n	8002a00 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d6:	f043 0220 	orr.w	r2, r3, #32
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e00f      	b.n	8002a02 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00a      	beq.n	80029fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f8:	2b80      	cmp	r3, #128	; 0x80
 80029fa:	d0f2      	beq.n	80029e2 <SPI_EndRxTxTransaction+0x52>
 80029fc:	e000      	b.n	8002a00 <SPI_EndRxTxTransaction+0x70>
        break;
 80029fe:	bf00      	nop
  }

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000000 	.word	0x20000000
 8002a10:	165e9f81 	.word	0x165e9f81

08002a14 <__libc_init_array>:
 8002a14:	b570      	push	{r4, r5, r6, lr}
 8002a16:	4d0d      	ldr	r5, [pc, #52]	; (8002a4c <__libc_init_array+0x38>)
 8002a18:	4c0d      	ldr	r4, [pc, #52]	; (8002a50 <__libc_init_array+0x3c>)
 8002a1a:	1b64      	subs	r4, r4, r5
 8002a1c:	10a4      	asrs	r4, r4, #2
 8002a1e:	2600      	movs	r6, #0
 8002a20:	42a6      	cmp	r6, r4
 8002a22:	d109      	bne.n	8002a38 <__libc_init_array+0x24>
 8002a24:	4d0b      	ldr	r5, [pc, #44]	; (8002a54 <__libc_init_array+0x40>)
 8002a26:	4c0c      	ldr	r4, [pc, #48]	; (8002a58 <__libc_init_array+0x44>)
 8002a28:	f000 f82e 	bl	8002a88 <_init>
 8002a2c:	1b64      	subs	r4, r4, r5
 8002a2e:	10a4      	asrs	r4, r4, #2
 8002a30:	2600      	movs	r6, #0
 8002a32:	42a6      	cmp	r6, r4
 8002a34:	d105      	bne.n	8002a42 <__libc_init_array+0x2e>
 8002a36:	bd70      	pop	{r4, r5, r6, pc}
 8002a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a3c:	4798      	blx	r3
 8002a3e:	3601      	adds	r6, #1
 8002a40:	e7ee      	b.n	8002a20 <__libc_init_array+0xc>
 8002a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a46:	4798      	blx	r3
 8002a48:	3601      	adds	r6, #1
 8002a4a:	e7f2      	b.n	8002a32 <__libc_init_array+0x1e>
 8002a4c:	08004000 	.word	0x08004000
 8002a50:	08004000 	.word	0x08004000
 8002a54:	08004000 	.word	0x08004000
 8002a58:	08004004 	.word	0x08004004

08002a5c <memcpy>:
 8002a5c:	440a      	add	r2, r1
 8002a5e:	4291      	cmp	r1, r2
 8002a60:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a64:	d100      	bne.n	8002a68 <memcpy+0xc>
 8002a66:	4770      	bx	lr
 8002a68:	b510      	push	{r4, lr}
 8002a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a72:	4291      	cmp	r1, r2
 8002a74:	d1f9      	bne.n	8002a6a <memcpy+0xe>
 8002a76:	bd10      	pop	{r4, pc}

08002a78 <memset>:
 8002a78:	4402      	add	r2, r0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d100      	bne.n	8002a82 <memset+0xa>
 8002a80:	4770      	bx	lr
 8002a82:	f803 1b01 	strb.w	r1, [r3], #1
 8002a86:	e7f9      	b.n	8002a7c <memset+0x4>

08002a88 <_init>:
 8002a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8a:	bf00      	nop
 8002a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a8e:	bc08      	pop	{r3}
 8002a90:	469e      	mov	lr, r3
 8002a92:	4770      	bx	lr

08002a94 <_fini>:
 8002a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a96:	bf00      	nop
 8002a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a9a:	bc08      	pop	{r3}
 8002a9c:	469e      	mov	lr, r3
 8002a9e:	4770      	bx	lr
